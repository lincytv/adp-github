{"ast":null,"code":"/*! @azure/msal-browser v2.18.0 2021-10-05 */\n'use strict';\n\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { DEFAULT_REQUEST, InteractionType } from '../utils/BrowserConstants.js';\nimport { ClientApplication } from './ClientApplication.js';\nimport { EventType } from '../event/EventType.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { SilentCacheClient } from '../interaction_client/SilentCacheClient.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * The PublicClientApplication class is the object exposed by the library to perform authentication and authorization functions in Single Page Applications\r\n * to obtain JWT tokens as described in the OAuth 2.0 Authorization Code Flow with PKCE specification.\r\n */\n\nvar PublicClientApplication =\n/** @class */\nfunction (_super) {\n  __extends(PublicClientApplication, _super);\n  /**\r\n   * @constructor\r\n   * Constructor for the PublicClientApplication used to instantiate the PublicClientApplication object\r\n   *\r\n   * Important attributes in the Configuration object for auth are:\r\n   * - clientID: the application ID of your application. You can obtain one by registering your application with our Application registration portal : https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredAppsPreview\r\n   * - authority: the authority URL for your application.\r\n   * - redirect_uri: the uri of your application registered in the portal.\r\n   *\r\n   * In Azure AD, authority is a URL indicating the Azure active directory that MSAL uses to obtain tokens.\r\n   * It is of the form https://login.microsoftonline.com/{Enter_the_Tenant_Info_Here}\r\n   * If your application supports Accounts in one organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with the Tenant Id or Tenant name (for example, contoso.microsoft.com).\r\n   * If your application supports Accounts in any organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with organizations.\r\n   * If your application supports Accounts in any organizational directory and personal Microsoft accounts, replace \"Enter_the_Tenant_Info_Here\" value with common.\r\n   * To restrict support to Personal Microsoft accounts only, replace \"Enter_the_Tenant_Info_Here\" value with consumers.\r\n   *\r\n   * In Azure B2C, authority is of the form https://{instance}/tfp/{tenant}/{policyName}/\r\n   * Full B2C functionality will be available in this library in future versions.\r\n   *\r\n   * @param configuration object for the MSAL PublicClientApplication instance\r\n   */\n\n\n  function PublicClientApplication(configuration) {\n    var _this = _super.call(this, configuration) || this;\n\n    _this.activeSilentTokenRequests = new Map();\n    return _this;\n  }\n  /**\r\n   * Use when initiating the login process by redirecting the user's browser to the authorization endpoint. This function redirects the page, so\r\n   * any code that follows this function will not execute.\r\n   *\r\n   * IMPORTANT: It is NOT recommended to have code that is dependent on the resolution of the Promise. This function will navigate away from the current\r\n   * browser window. It currently returns a Promise in order to reflect the asynchronous nature of the code running in this function.\r\n   *\r\n   * @param request\r\n   */\n\n\n  PublicClientApplication.prototype.loginRedirect = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        this.logger.verbose(\"loginRedirect called\");\n        return [2\n        /*return*/\n        , this.acquireTokenRedirect(request || DEFAULT_REQUEST)];\n      });\n    });\n  };\n  /**\r\n   * Use when initiating the login process via opening a popup window in the user's browser\r\n   *\r\n   * @param request\r\n   *\r\n   * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\r\n   */\n\n\n  PublicClientApplication.prototype.loginPopup = function (request) {\n    this.logger.verbose(\"loginPopup called\");\n    return this.acquireTokenPopup(request || DEFAULT_REQUEST);\n  };\n  /**\r\n   * Silently acquire an access token for a given set of scopes. Returns currently processing promise if parallel requests are made.\r\n   *\r\n   * @param {@link (SilentRequest:type)}\r\n   * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse} object\r\n   */\n\n\n  PublicClientApplication.prototype.acquireTokenSilent = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var account, thumbprint, silentRequestKey, cachedResponse, response;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        this.preflightBrowserEnvironmentCheck(InteractionType.Silent);\n        this.logger.verbose(\"acquireTokenSilent called\", request.correlationId);\n        account = request.account || this.getActiveAccount();\n\n        if (!account) {\n          throw BrowserAuthError.createNoAccountError();\n        }\n\n        thumbprint = {\n          clientId: this.config.auth.clientId,\n          authority: request.authority || \"\",\n          scopes: request.scopes,\n          homeAccountIdentifier: account.homeAccountId,\n          authenticationScheme: request.authenticationScheme,\n          resourceRequestMethod: request.resourceRequestMethod,\n          resourceRequestUri: request.resourceRequestUri,\n          shrClaims: request.shrClaims\n        };\n        silentRequestKey = JSON.stringify(thumbprint);\n        cachedResponse = this.activeSilentTokenRequests.get(silentRequestKey);\n\n        if (typeof cachedResponse === \"undefined\") {\n          this.logger.verbose(\"acquireTokenSilent called for the first time, storing active request\", request.correlationId);\n          response = this.acquireTokenSilentAsync(request, account).then(function (result) {\n            _this.activeSilentTokenRequests.delete(silentRequestKey);\n\n            return result;\n          }).catch(function (error) {\n            _this.activeSilentTokenRequests.delete(silentRequestKey);\n\n            throw error;\n          });\n          this.activeSilentTokenRequests.set(silentRequestKey, response);\n          return [2\n          /*return*/\n          , response];\n        } else {\n          this.logger.verbose(\"acquireTokenSilent has been called previously, returning the result from the first call\", request.correlationId);\n          return [2\n          /*return*/\n          , cachedResponse];\n        }\n      });\n    });\n  };\n  /**\r\n   * Silently acquire an access token for a given set of scopes. Will use cached token if available, otherwise will attempt to acquire a new token from the network via refresh token.\r\n   * @param {@link (SilentRequest:type)}\r\n   * @param {@link (AccountInfo:type)}\r\n   * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse}\r\n   */\n\n\n  PublicClientApplication.prototype.acquireTokenSilentAsync = function (request, account) {\n    return __awaiter(this, void 0, void 0, function () {\n      var silentCacheClient, silentRequest;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        silentCacheClient = new SilentCacheClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient);\n        silentRequest = silentCacheClient.initializeSilentRequest(request, account);\n        this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_START, InteractionType.Silent, request);\n        return [2\n        /*return*/\n        , silentCacheClient.acquireToken(silentRequest).catch(function () {\n          return __awaiter(_this, void 0, void 0, function () {\n            var tokenRenewalResult, tokenRenewalError_1;\n            return __generator(this, function (_a) {\n              switch (_a.label) {\n                case 0:\n                  _a.trys.push([0, 2,, 3]);\n\n                  return [4\n                  /*yield*/\n                  , this.acquireTokenByRefreshToken(silentRequest)];\n\n                case 1:\n                  tokenRenewalResult = _a.sent();\n                  this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_SUCCESS, InteractionType.Silent, tokenRenewalResult);\n                  return [2\n                  /*return*/\n                  , tokenRenewalResult];\n\n                case 2:\n                  tokenRenewalError_1 = _a.sent();\n                  this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_FAILURE, InteractionType.Silent, null, tokenRenewalError_1);\n                  throw tokenRenewalError_1;\n\n                case 3:\n                  return [2\n                  /*return*/\n                  ];\n              }\n            });\n          });\n        })];\n      });\n    });\n  };\n\n  return PublicClientApplication;\n}(ClientApplication);\n\nexport { PublicClientApplication };","map":{"version":3,"sources":["/home/shinto/allianz/angular/adp-github/adp-github/node_modules/@azure/msal-browser/dist/app/PublicClientApplication.js"],"names":["__extends","__awaiter","__generator","DEFAULT_REQUEST","InteractionType","ClientApplication","EventType","BrowserAuthError","SilentCacheClient","PublicClientApplication","_super","configuration","_this","call","activeSilentTokenRequests","Map","prototype","loginRedirect","request","_a","logger","verbose","acquireTokenRedirect","loginPopup","acquireTokenPopup","acquireTokenSilent","account","thumbprint","silentRequestKey","cachedResponse","response","preflightBrowserEnvironmentCheck","Silent","correlationId","getActiveAccount","createNoAccountError","clientId","config","auth","authority","scopes","homeAccountIdentifier","homeAccountId","authenticationScheme","resourceRequestMethod","resourceRequestUri","shrClaims","JSON","stringify","get","acquireTokenSilentAsync","then","result","delete","catch","error","set","silentCacheClient","silentRequest","browserStorage","browserCrypto","eventHandler","navigationClient","initializeSilentRequest","emitEvent","ACQUIRE_TOKEN_START","acquireToken","tokenRenewalResult","tokenRenewalError_1","label","trys","push","acquireTokenByRefreshToken","sent","ACQUIRE_TOKEN_SUCCESS","ACQUIRE_TOKEN_FAILURE"],"mappings":"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","sourcesContent":["/*! @azure/msal-browser v2.18.0 2021-10-05 */\n'use strict';\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { DEFAULT_REQUEST, InteractionType } from '../utils/BrowserConstants.js';\nimport { ClientApplication } from './ClientApplication.js';\nimport { EventType } from '../event/EventType.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { SilentCacheClient } from '../interaction_client/SilentCacheClient.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * The PublicClientApplication class is the object exposed by the library to perform authentication and authorization functions in Single Page Applications\r\n * to obtain JWT tokens as described in the OAuth 2.0 Authorization Code Flow with PKCE specification.\r\n */\r\nvar PublicClientApplication = /** @class */ (function (_super) {\r\n    __extends(PublicClientApplication, _super);\r\n    /**\r\n     * @constructor\r\n     * Constructor for the PublicClientApplication used to instantiate the PublicClientApplication object\r\n     *\r\n     * Important attributes in the Configuration object for auth are:\r\n     * - clientID: the application ID of your application. You can obtain one by registering your application with our Application registration portal : https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredAppsPreview\r\n     * - authority: the authority URL for your application.\r\n     * - redirect_uri: the uri of your application registered in the portal.\r\n     *\r\n     * In Azure AD, authority is a URL indicating the Azure active directory that MSAL uses to obtain tokens.\r\n     * It is of the form https://login.microsoftonline.com/{Enter_the_Tenant_Info_Here}\r\n     * If your application supports Accounts in one organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with the Tenant Id or Tenant name (for example, contoso.microsoft.com).\r\n     * If your application supports Accounts in any organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with organizations.\r\n     * If your application supports Accounts in any organizational directory and personal Microsoft accounts, replace \"Enter_the_Tenant_Info_Here\" value with common.\r\n     * To restrict support to Personal Microsoft accounts only, replace \"Enter_the_Tenant_Info_Here\" value with consumers.\r\n     *\r\n     * In Azure B2C, authority is of the form https://{instance}/tfp/{tenant}/{policyName}/\r\n     * Full B2C functionality will be available in this library in future versions.\r\n     *\r\n     * @param configuration object for the MSAL PublicClientApplication instance\r\n     */\r\n    function PublicClientApplication(configuration) {\r\n        var _this = _super.call(this, configuration) || this;\r\n        _this.activeSilentTokenRequests = new Map();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Use when initiating the login process by redirecting the user's browser to the authorization endpoint. This function redirects the page, so\r\n     * any code that follows this function will not execute.\r\n     *\r\n     * IMPORTANT: It is NOT recommended to have code that is dependent on the resolution of the Promise. This function will navigate away from the current\r\n     * browser window. It currently returns a Promise in order to reflect the asynchronous nature of the code running in this function.\r\n     *\r\n     * @param request\r\n     */\r\n    PublicClientApplication.prototype.loginRedirect = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                this.logger.verbose(\"loginRedirect called\");\r\n                return [2 /*return*/, this.acquireTokenRedirect(request || DEFAULT_REQUEST)];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Use when initiating the login process via opening a popup window in the user's browser\r\n     *\r\n     * @param request\r\n     *\r\n     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\r\n     */\r\n    PublicClientApplication.prototype.loginPopup = function (request) {\r\n        this.logger.verbose(\"loginPopup called\");\r\n        return this.acquireTokenPopup(request || DEFAULT_REQUEST);\r\n    };\r\n    /**\r\n     * Silently acquire an access token for a given set of scopes. Returns currently processing promise if parallel requests are made.\r\n     *\r\n     * @param {@link (SilentRequest:type)}\r\n     * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse} object\r\n     */\r\n    PublicClientApplication.prototype.acquireTokenSilent = function (request) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var account, thumbprint, silentRequestKey, cachedResponse, response;\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                this.preflightBrowserEnvironmentCheck(InteractionType.Silent);\r\n                this.logger.verbose(\"acquireTokenSilent called\", request.correlationId);\r\n                account = request.account || this.getActiveAccount();\r\n                if (!account) {\r\n                    throw BrowserAuthError.createNoAccountError();\r\n                }\r\n                thumbprint = {\r\n                    clientId: this.config.auth.clientId,\r\n                    authority: request.authority || \"\",\r\n                    scopes: request.scopes,\r\n                    homeAccountIdentifier: account.homeAccountId,\r\n                    authenticationScheme: request.authenticationScheme,\r\n                    resourceRequestMethod: request.resourceRequestMethod,\r\n                    resourceRequestUri: request.resourceRequestUri,\r\n                    shrClaims: request.shrClaims\r\n                };\r\n                silentRequestKey = JSON.stringify(thumbprint);\r\n                cachedResponse = this.activeSilentTokenRequests.get(silentRequestKey);\r\n                if (typeof cachedResponse === \"undefined\") {\r\n                    this.logger.verbose(\"acquireTokenSilent called for the first time, storing active request\", request.correlationId);\r\n                    response = this.acquireTokenSilentAsync(request, account)\r\n                        .then(function (result) {\r\n                        _this.activeSilentTokenRequests.delete(silentRequestKey);\r\n                        return result;\r\n                    })\r\n                        .catch(function (error) {\r\n                        _this.activeSilentTokenRequests.delete(silentRequestKey);\r\n                        throw error;\r\n                    });\r\n                    this.activeSilentTokenRequests.set(silentRequestKey, response);\r\n                    return [2 /*return*/, response];\r\n                }\r\n                else {\r\n                    this.logger.verbose(\"acquireTokenSilent has been called previously, returning the result from the first call\", request.correlationId);\r\n                    return [2 /*return*/, cachedResponse];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Silently acquire an access token for a given set of scopes. Will use cached token if available, otherwise will attempt to acquire a new token from the network via refresh token.\r\n     * @param {@link (SilentRequest:type)}\r\n     * @param {@link (AccountInfo:type)}\r\n     * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse}\r\n     */\r\n    PublicClientApplication.prototype.acquireTokenSilentAsync = function (request, account) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var silentCacheClient, silentRequest;\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                silentCacheClient = new SilentCacheClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient);\r\n                silentRequest = silentCacheClient.initializeSilentRequest(request, account);\r\n                this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_START, InteractionType.Silent, request);\r\n                return [2 /*return*/, silentCacheClient.acquireToken(silentRequest).catch(function () { return __awaiter(_this, void 0, void 0, function () {\r\n                        var tokenRenewalResult, tokenRenewalError_1;\r\n                        return __generator(this, function (_a) {\r\n                            switch (_a.label) {\r\n                                case 0:\r\n                                    _a.trys.push([0, 2, , 3]);\r\n                                    return [4 /*yield*/, this.acquireTokenByRefreshToken(silentRequest)];\r\n                                case 1:\r\n                                    tokenRenewalResult = _a.sent();\r\n                                    this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_SUCCESS, InteractionType.Silent, tokenRenewalResult);\r\n                                    return [2 /*return*/, tokenRenewalResult];\r\n                                case 2:\r\n                                    tokenRenewalError_1 = _a.sent();\r\n                                    this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_FAILURE, InteractionType.Silent, null, tokenRenewalError_1);\r\n                                    throw tokenRenewalError_1;\r\n                                case 3: return [2 /*return*/];\r\n                            }\r\n                        });\r\n                    }); })];\r\n            });\r\n        });\r\n    };\r\n    return PublicClientApplication;\r\n}(ClientApplication));\n\nexport { PublicClientApplication };\n"]},"metadata":{},"sourceType":"module"}